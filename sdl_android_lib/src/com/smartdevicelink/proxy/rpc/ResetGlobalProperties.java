package com.smartdevicelink.proxy.rpc;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import com.smartdevicelink.protocol.enums.FunctionID;
import com.smartdevicelink.proxy.RPCRequest;
import com.smartdevicelink.proxy.rpc.enums.GlobalProperty;
import com.smartdevicelink.util.SdlLog;
/**
 * Resets the passed global properties to their default values as defined by
 * SDL
 * <p>
 * The HELPPROMPT global property default value is generated by SDL consists of
 * the first vrCommand of each Command Menu item defined at the moment PTT is
 * pressed<br/>
 * The TIMEOUTPROMPT global property default value is the same as the HELPPROMPT
 * global property default value
 * <p>
 * <b>HMILevel needs to be FULL, LIMITED or BACKGROUND</b>
 * </p>
 * 
 * @since SmartDeviceLink 1.0
 * @see SetGlobalProperties
 */
public class ResetGlobalProperties extends RPCRequest {
	public static final String KEY_PROPERTIES = "properties";
	/**
	 * Constructs a new ResetGlobalProperties object
	 */
    public ResetGlobalProperties() {
        super(FunctionID.RESET_GLOBAL_PROPERTIES.toString());
    }
	/**
	 * Constructs a new ResetGlobalProperties object indicated by the Hashtable
	 * parameter
	 * <p>
	 * 
	 * @param hash
	 *            The Hashtable to use
	 */    
    public ResetGlobalProperties(Hashtable<String, Object> hash) {
        super(hash);
    }
	/**
	 * Gets an array of one or more GlobalProperty enumeration elements
	 * indicating which global properties to reset to their default value
	 * 
	 * @return List<GlobalProperty> -an array of one or more GlobalProperty
	 *         enumeration elements
	 */    
    @SuppressWarnings("unchecked")
    public List<GlobalProperty> getProperties() {
    	if (parameters.get(KEY_PROPERTIES) instanceof List<?>) {
    		List<?> list = (List<?>)parameters.get(KEY_PROPERTIES);
	        if (list != null && list.size() > 0) {

	        	List<GlobalProperty> globalPropertyList  = new ArrayList<GlobalProperty>();

	        	boolean flagRaw  = false;
	        	boolean flagStr = false;
	        	
	        	for ( Object obj : list ) {
	        		
	        		// This does not currently allow for a mixing of types, meaning
	        		// there cannot be a raw GlobalProperty and a String value in the
	        		// same same list. It will not be considered valid currently.
	        		if (obj instanceof SoftButton) {
	        			if (flagStr) {
	        				return null;
	        			}

	        			flagRaw = true;

	        		} else if (obj instanceof String) {
	        			if (flagRaw) {
	        				return null;
	        			}

	        			flagStr = true;
	        			String strFormat = (String) obj;
	                    GlobalProperty toAdd = null;
	                    try {
	                        toAdd = GlobalProperty.valueForString(strFormat);
	                    } catch (Exception e) {
	                    	SdlLog.e("Failed to parse " + getClass().getSimpleName() + "." + KEY_PROPERTIES, e);
	                    }
	                    if (toAdd != null) {
	                    	globalPropertyList.add(toAdd);
	                    }

	        		} else {
	        			return null;
	        		}

	        	}

	        	if (flagRaw) {
	        		return (List<GlobalProperty>) list;
	        	} else if (flagStr) {
	        		return globalPropertyList;
	        	}
	        }
    	}
        return null;
    }
	/**
	 * Sets an array of one or more GlobalProperty enumeration elements
	 * indicating which global properties to reset to their default value
	 * 
	 * @param properties
	 *            a List<GlobalProperty> An array of one or more
	 *            GlobalProperty enumeration elements indicating which global
	 *            properties to reset to their default value
	 *            <p>
	 *            <b>Notes: </b>Array must have at least one element
	 */    
    public void setProperties( List<GlobalProperty> properties ) {

		boolean valid = true;
		
		for (GlobalProperty item : properties ) {
			if (item == null) {
				valid = false;
			}
		}
		
		if ( (properties != null) && (properties.size() > 0) && valid) {
            parameters.put(KEY_PROPERTIES, properties );
        } else {
        	parameters.remove(KEY_PROPERTIES);
        }
    }
}
